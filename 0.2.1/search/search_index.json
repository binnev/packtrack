{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Packtrack","text":"<p>A simple CLI for tracking mail packages. See the documentation</p>"},{"location":"dev-docs/dependencies/","title":"Dependencies","text":"<p>Use <code>cargo</code> -- Rust's dependency manager (amongst other things).</p> <p>Add a dependency:  <pre><code>cargo add serde\n</code></pre></p> <p>Add a dev dependency: <pre><code>cargo add pretty_assertions --dev\n</code></pre></p> <p>Upgrade pinned dependency versions: <pre><code>cargo update\n</code></pre></p> <p>Install dependencies: <pre><code>cargo build\n</code></pre></p>"},{"location":"dev-docs/docs/","title":"Docs","text":""},{"location":"dev-docs/docs/#view-the-documentation-locally","title":"View the documentation locally:","text":""},{"location":"dev-docs/docs/#mkdocs","title":"Mkdocs","text":"<p>To view the mkdocs site, run:  <pre><code>mkdocs serve\n</code></pre> and go to <code>localhost:8000</code> to view the docs. Mkdocs hot-reloads the docs, so any changes you make will be immediately visible.</p> <p>Unfortunately, there is currently no <code>mkdocstrings</code> plugin available for Rust, which means we can't easily include docstrings from the code in the docs site. Instead, we use <code>cargo doc</code> to generate separate reference docs from the docstrings in the code.</p> <p><pre><code>cargo watch -x \"doc --no-deps\"\n</code></pre> (You will need to manually refresh the browser for your changes to be reflected)</p>"},{"location":"dev-docs/docs/#versioning","title":"Versioning","text":"<p>We use <code>mike</code> to manage versioning for our documentation. It creates a snapshot of the documentation for each version of the project, allowing users to access the appropriate docs for the version they're using\u2014even if it's an older one.</p>"},{"location":"dev-docs/docs/#build-new-docs-version","title":"Build new docs version","text":"<p>Build the docs for the current project version:  <pre><code>mike deploy $(cz version --project) latest --update-aliases\n</code></pre></p> <p>To push your new docs version:  <pre><code>mike deploy $(cz version --project) latest --update-aliases --push\n</code></pre></p> <p>The first time you use Mike, you'll need to tell it which version is the default (the one it shows when you load the docs main page). We'll set it to the \"default\" alias: <pre><code>mike set-default latest\n</code></pre></p> <p>To list the available docs versions:  <pre><code>mike list \n</code></pre></p> <p>To view the versioned docs locally (with a drop-down to select which docs version you want):  <pre><code>mike serve \n</code></pre></p>"},{"location":"dev-docs/docs/#writing","title":"Writing","text":"<p>These are some tools you can use to enrich the documentation. </p>"},{"location":"dev-docs/docs/#diagrams","title":"Diagrams","text":"<p>Mermaid diagrams can be written in a <code>mermaid</code> code block, and they will be rendered as diagrams: </p> <p>Graphs:  <pre><code>graph LR\n    hello --&gt; world\n    world --&gt; again\n    again --&gt; hello</code></pre></p> <p>Sequence diagrams:  <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre></p> <p>Class diagrams: <pre><code>classDiagram\n  Person &lt;|-- Student\n  Person &lt;|-- Professor\n  Person : +String name\n  Person : +String phoneNumber\n  Person : +String emailAddress\n  Person: +purchaseParkingPass()\n  Address \"1\" &lt;-- \"0..1\" Person:lives at\n  class Student{\n    +int studentNumber\n    +int averageMark\n    +isEligibleToEnrol()\n    +getSeminarsTaken()\n  }\n  class Professor{\n    +int salary\n  }\n  class Address{\n    +String street\n    +String city\n    +String state\n    +int postalCode\n    +String country\n    -validate()\n    +outputAsLabel()  \n  }</code></pre></p>"},{"location":"dev-docs/docs/#tooltips","title":"Tooltips","text":"<p>Tooltips and other such \"admonitions\" can be written with a <code>!!!</code> block: <pre><code>!!! note\n    This is a note.\n</code></pre></p> <p>Note</p> <p>This is a note.</p> <p>Tip</p> <p>This is a tip.</p> <p>Warning</p> <p>Be careful!</p> <p>Danger</p> <p>This is dangerous!</p>"},{"location":"dev-docs/docs/#code-blocks","title":"Code blocks","text":"<p>Specify python with the \"py\" shortcode after the 3 backticks. You can highlight lines too with <code>hl_lines=\"3-5\"</code></p> <pre><code>/// Divides the first number by the second and returns the result.\n///\n/// # Panics\n///\n/// Panics if the second number is zero.\n///\n/// # Examples\n///\n/// ```\n/// let result = rust_template::divide(6.0, 3.0);\n/// assert_eq!(result, 2.0);\n/// ```\npub fn divide(a: f64, b: f64) -&gt; f64 {\n    if b == 0.0 {\n        panic!(\"Cannot divide by zero\");\n    }\n    a / b\n}\n</code></pre> <p>Inline code blocks can be highlighted for specific languages by prefixing <code>#!python</code>: <code>lambda a: print(a)</code></p>"},{"location":"dev-docs/docs/#content-tabs","title":"Content tabs","text":"<p>Content tabs can be used to show different versions of something in a tabbed layout:</p> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre> <p>It doesn't have to be code: </p> Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol>"},{"location":"dev-docs/getting-started/","title":"Getting Started","text":"<p>This tutorial will guide you through setting up and running the Python Template project.</p> nix + direnvmanual <p>This project is intended to be used with nix and direnv. If you have these tools set up, simply opening a terminal in the project folder will perform all the necessary setup steps for you, including installing dependencies and pre-commit hooks :) </p> <p>If you are not using nix and direnv, follow these steps to setup the project</p>"},{"location":"dev-docs/getting-started/#steps","title":"Steps","text":"<ol> <li>Clone the repository: <pre><code>git clone &lt;repository-url&gt;\ncd rust-template\n</code></pre></li> </ol>"},{"location":"dev-docs/getting-started/#steps_1","title":"Steps","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone &lt;repository-url&gt;\ncd rust-template\n</code></pre></p> </li> <li> <p>Create a virtual environment (for the python helper tools):  <pre><code>uv venv\nsource .venv/bin/activate\n</code></pre></p> </li> <li> <p>Install python helper dependencies: <pre><code>uv pip install -r pyproject.toml --all-extras\n</code></pre></p> </li> <li> <p>Install pre-commit hooks: <pre><code>pre-commit install\n</code></pre></p> </li> <li> <p>Install rust dependencies:  <pre><code>cargo build \n</code></pre></p> </li> </ol>"},{"location":"dev-docs/testing/","title":"Testing","text":""},{"location":"dev-docs/testing/#run-all-tests","title":"Run all tests","text":"<p>Running all tests should be as simple as this: <pre><code>cargo test\n</code></pre></p>"},{"location":"dev-docs/testing/#run-specific-tests","title":"Run specific tests","text":"<p>Run only tests which have \"multiply\" in the file or function name:  <pre><code>cargo test multiply\n</code></pre></p>"},{"location":"dev-docs/testing/#watch-tests","title":"Watch tests","text":"<p>To automatically re-run tests while you are working on them, use  <code>pytest-watcher</code> (<code>q</code> to quit): <pre><code>cargo watch -x test\n</code></pre></p> <p>You can also watch specific tests using the <code>-k</code> flag:  <pre><code>cargo watch -x \"test multiply\"\n</code></pre></p> <p>By default, tests are re-run 0.5 seconds after the last file edit. To increase the delay, pass <code>--delay</code>:  <pre><code>cargo watch -x \"test multiply\" --delay 1\n</code></pre></p>"},{"location":"dev-docs/testing/#getting-test-coverage","title":"Getting test coverage","text":"<p>TODO</p>"},{"location":"dev-docs/versioning/","title":"Versioning","text":"<p>Use commitizen to automatically calculate version increments, based on Conventional Commit Messages and Semantic Versioning <pre><code>cz bump\n</code></pre></p>"},{"location":"explanation/aim/","title":"Aim","text":"<p><code>packtrack</code> aims to provide a simple CLI for tracking multiple packages in the mail.</p>"},{"location":"how-to/urls/","title":"URL management","text":""},{"location":"how-to/urls/#add-a-url","title":"Add a URL","text":"<pre><code>packtrack url add example.com/mypackage\n</code></pre>"},{"location":"how-to/urls/#remove-a-url","title":"Remove a URL","text":"<pre><code>packtrack url remove example.com/mypackage\n</code></pre>"},{"location":"how-to/urls/#view-the-list-of-tracked-urls","title":"View the list of tracked URLs","text":"<pre><code>packtrack url list\n</code></pre>"},{"location":"ref/","title":"Reference","text":"<p>Link to your docs.rs page here.</p> <p>It is possible to put your docstrings in markdown files (like <code>add.md</code>, <code>multiply.md</code>, etc) and attach them to the code object they describe (see <code>lib.rs</code>). This allows you to have some kind of API reference in the mkdocs site, but it does make the code less readable. </p>"},{"location":"ref/add/","title":"Add","text":"<p>Adds two numbers and returns the result.</p>"},{"location":"ref/add/#examples","title":"Examples","text":"<pre><code>let result = rust_template::add(2.0, 3.0);\nassert_eq!(result, 5.0);\n</code></pre>"},{"location":"ref/multiply/","title":"Multiply","text":"<p>Multiplies two numbers and returns the result.</p>"},{"location":"ref/multiply/#examples","title":"Examples","text":"<pre><code>let result = rust_template::multiply(2.0, 3.0);\nassert_eq!(result, 6.0);\n</code></pre>"},{"location":"ref/subtract/","title":"Subtract","text":"<p>Subtracts the second number from the first and returns the result.</p>"},{"location":"ref/subtract/#examples","title":"Examples","text":"<pre><code>let result = rust_template::subtract(5.0, 3.0);\nassert_eq!(result, 2.0);\n</code></pre>"},{"location":"tutorials/getting-started/","title":"Installation","text":"<p>You'll need to install Cargo (Rust's package manager). After that, installing <code>packtrack</code> is simple:</p> <pre><code>cargo install packtrack \n</code></pre>"}]}